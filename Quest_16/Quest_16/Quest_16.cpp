#include <iostream>
#include <vector>
#include <algorithm>

// Задача 16. Провода.

// Имя входного файла: стандартный ввод
// Имя выходного файла: стандартный вывод 2 секунды 
// Ограничение по памяти: 64 мегабайта,
// На складе есть провода различной целочисленной длины. Их можно
// разрезать на части.Необходимо получить К кусочков одинаковой цело -
// численной и как можно большей длины.Найти максимальную длину М,
// при которой можно получить по меньшей мере К кусочков этой длины.
// Все оставшиеся на складе куски проводов длиной, меньшей М, в подсчете не участвуют.
// Сначала считывем количество проводов и количество кусков, которые необходимо получить. 
// Затем считываем длины всех проводов и выполняем бинарный поиск для поиска максимальной длины М,
// при которой можно получить по меньшей мере K кусков этой длины.

// Пример проги

// 1 строка: 5 4
// 2 строка: 8 5 4 10 6
// 3 строка вывод: Максимальная длина для получения по меньшей мере 4 кусков: 5
// В этом примере у нас есть 5 проводов, и мы хотим получить 4 куска. Длины проводов указаны после этого. 
// Результат выполнения программы будет максимальной длиной M, которую можно использовать, чтобы получить 4 куска провода.


bool canCut(const std::vector<int>& wires, int K, int M) {
    int count = 0;
    for (int wire : wires) {
        count += wire / M;
    }
    return count >= K;
}

int main() {

    setlocale(LC_ALL, "Russian");


    std::cout << "Пожалуйста, введите количество проводов и количество кусков через пробел, которые необходимо получить:" << std::endl;

    int N, K;
    std::cin >> N >> K;
    std::vector<int> wires(N);

    std::cout << "Пожалуйста, введите длины проводов через пробел:" << std::endl;
    for (int i = 0; i < N; i++) {
        std::cin >> wires[i];
    }

    int left = 1;  // Минимальная возможная длина
    int right = *std::max_element(wires.begin(), wires.end()); // Максимальная возможная длина

    while (left < right) {
        int mid = left + (right - left) / 2;
        if (canCut(wires, K, mid)) {
            left = mid + 1;
        }
        else {
            right = mid;
        }
    }

    if (canCut(wires, K, left - 1)) {
        std::cout << "Максимальная длина для получения по меньшей мере " << K << " кусков: " << left - 1 << std::endl;
    }
    else {
        std::cout << "Максимальная длина для получения по меньшей мере " << K << " кусков: " << left << std::endl;
    }

    return 0;
}
